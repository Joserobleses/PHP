PHP > Sprint 14. Laravel API > Tasca M14

Descripció
En aquesta pràctica aprendras a crear una API completa.
Hauras de crear una aplicació, per a una botiga de cuadres,
 aplicant el patró de disseny de software MVC(Model-Vista-Controlador). 

///////////////////////////////////////////////////////////////////////////////////////

Nivell 1
 
- Exercici 1

Tenim una franquicia de botiga de quadres il·legals que fa veure que ven collarets blancs,
 per això es diu “white collar”. 

Aquesta franquicia té varies botigues, cadascuna amb un nom i una capacitat màxima de quadres (o collars^^).
 
Hi ha quadres que tenen un nom d’autor i d’altres que són anònims.
 
Això sí, tots tenen un nom, un preu i una data d’entrada (és la data del moment en el que entra a la botiga).
 
El client ens demana implementar una API REST amb Laravel.

botiga 1:nom:boti1, capacitat:10,
 botiga 2:nom:boti2, capacitat:20,
 botiga3:nom:boti3, capacitat:5,
 ...
A database > migrations > 2021_09_19_152655_create_botigas_table.php

 Schema::create('botigas', function (Blueprint $table) {
            $table->id();

            $table->string('nomBotiga');
            $table->string('capacitat');

            $table->timestamps();
        });
------------------------------------------------------------------------
A database > migrations > 2021_09_19_152818_create_quadres_table.php

quadre1: nom_autor: juan // preu : 100 // data_entrada: 10/11/2021
quadre2: nom_autor: anonim // preu :25 // data_entrada: 10/12/2021
quadre3: nom_autor: pedro // preu 356 // data_entrada: 20/11/2021
quadre4: nom_autor: anónim // preu 600000 // data_entrada: 01/06/2021
....

 Schema::create('quadres', function (Blueprint $table) {
            $table->id();

            $table->string('nomAutor');
            $table->string('preu');

            $table->timestamps();
        });

-------------------------------------------------------------------------

 Aquesta API ha de cumplir les següents funcionalitats:

Crear botiga: li direm el nom i la capacitat (POST /shops/).

Llistar botigues: retorna la llista de botigues amb el seu nom i la capacitat (GET /shops/).

Afegir quadre: li donarem el nom del quadre i el del autor (POST /shops/{ID}/pictures)

Llistar els quadres de la botiga (GET /shops/{ID}/pictures).

Incendiar quadres: per si ve la policia,
 es poden eliminar tots els quadres de la botiga sense deixar rastre (DELETE /shops/{ID}/pictures).

NOTES

Has de tindre en compte els següents detalls de construcció:

Dissenya la base de dades com a primer pas.

Utilitza ELOQUENT per accedir-hi.

Inclou en un directori del projecte la col·lecció Postman per a les invocacions http

Per a consultes a mysql, utilitzeu MysqlWorkbench.
Si ho prefereixes, també pots utilitzar DataGrip, Dbeaver o altres.

///////////////////////////////////////////////////////////////////////////////////////

Nivell 2
- Exercici 2

- Afegeix el sistema de control d’accés de Laravel Passport.

1 - composer require laravel/passport
2 - php artisan migrate
3 - php artisan passport:install
4 - a user model
  <?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Passport\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;
}
?>  
  
5 - a App\Providers\AuthServiceProvider
  <?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Gate;
use Laravel\Passport\Passport;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array
     */
    protected $policies = [
        'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerPolicies();

        if (! $this->app->routesAreCached()) {
            Passport::routes();
        }
    }
}  
  ?>
 
7 - a config/auth.php
    'guards' => [
    'web' => [
        'driver' => 'session',
        'provider' => 'users',
    ],

    'api' => [
        'driver' => 'passport',
        'provider' => 'users',
    ],
],


tipus autentificació d'aquest exercici a l'itirenari Personal Access Token

php artisan passport:client --personal

>Persona Access Token

anar a .env

PASSPORT_PERSONAL_ACCESS_CLIENT_ID=3
PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=nFxzBO2StDyX0C6n2n96nxsU7Sjwcie5I3v1Ig2p
(dades extretes de base de dades oauth.clients)-------------------------------------------------------------------

- Defineix el login, registre i recuperació de contrasenya que l'usuari necessita per accedir a l'aplicació.

- Fes us de la configuració per defecte.


- Exercici 3

Defineix sistema de rols i bloqueja el accés a les diferents rutes segons el seu nivell de privilegis.


///////////////////////////////////////////////////////////////////////////////////////

Nivell 3

- Exercici 4

Crea una aplicació frontal amb AJAX per a consumir les dades de les diferents rutes.
 Si vols pots fer-la per mitjà d’un framework: Angular, Vue, React...

Instalado vue, vue-router, vue-axios

-----------------------------------------------------------------------------------------------------

- Exercici 5
Soluciona el CORS.

En terminal :

php artisan make:middleware Cors


-----------------------------------------------

En App > Http >Middleware > Cors.php

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class Cors
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        return $next($request)
        //Url a la que se le dará acceso en las peticiones
      ->header("Access-Control-Allow-Origin", "http://urlfronted.example")
      //Métodos que a los que se da acceso
      ->header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
      //Headers de la petición
      ->header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type, X-Token-Auth, Authorization"); 
    }
}

-----------------------------------------------------
registrar nuestro middleware en app > Http > kernel.php

protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        "cors" => \App\Http\Middleware\Cors::class,
    ];

--------------------------------------

en routes > api.php


?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use  App\Http\Controllers\QuadreController;
use  App\Http\Controllers\BotigaController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

// Agrupamos rutas para solucionar cors mediante middleware cors

Route::group(['middleware' => ['cors']], function () {

    Route::resource('quadre', App\Http\Controllers\QuadreController::class)->only(['index','store','update','show','destroy']);

    Route::resource('botiga', App\Http\Controllers\BotigaController::class)->only(['index','store','update','show','destroy']);
});